apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-remote-helm-chart
spec:
  workspaces:
    - name: workspace
      description: |
        The workspace folder with the automation repository including helm charts and platform_config.
      mountPath: /workspace
      optional: true

  params:
    - name: path-to-values-file
      description: |
        Optional: The path to the configuration files for reading credentials.
        This should contain platform_config
      default: ""
    - name: chart-repository-name
      description: The chart repository name (e.g. bitnami) (optional)
      default: ""
    - name: chart-repository-url
      description: The chart repository url (e.g. https://charts.bitnami.com/bitnami) (optional)
      default: ""
    - name: chart-name
      description: The name of the chart to deploy via helm (e.g. bitnami/mysql)
    - name: chart-version
      description: The version of the chart to deploy via helm (e.g. 8.5.1) (If not set defaults to latest)
      default: ""
    - name: k8s-namespace
      description: The k8s namespace to use for the deployment
    - name: helm-deployment-name
      description: The name to use for the helm deployment
    - name: helm-timeout
      description: "How long should helm wait for the deployment to finish? - e.g. 5m0s"
      default: "5m0s"
    - name: overwrite-values
      description: values you want to overwrite, comma separated (e.g:) autoscaling.enabled=true,replicas=1
      default: ""
    - name: docker-registry-base-url
      description: The docker registry base url with path to load the CI image for tekton task execution from
    - name: tekton-ci-image-name
      description: The image name to use for the automation run
      default: "ubuntu-ci-minimal"
    - name: tekton-ci-image-tag
      description: The image tag to use for the automation run
      default: "latest"

  steps:
    - name: deploy-chart-via-helm
      image: "$(params.docker-registry-base-url)/$(params.tekton-ci-image-name):$(params.tekton-ci-image-tag)"
      resources:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 300m
      script: |
        #!/usr/bin/env bash
        set -ue

        # configure env:
        PATH_TO_VALUES_FILE="$(params.path-to-values-file)"
        CHART_REPOSITORY_NAME="$(params.chart-repository-name)"
        CHART_REPOSITORY_URL="$(params.chart-repository-url)"
        CHART_NAME="$(params.chart-name)"
        CHART_VERSION="$(params.chart-version)"
        K8S_NAMESPACE="$(params.k8s-namespace)"
        HELM_DEPLOYMENT_NAME="$(params.helm-deployment-name)"
        HELM_OVERWRITE_VALUES="$(params.overwrite-values)"
        HELM_TIMEOUT="$(params.helm-timeout)"

        echo "########################"
        echo "Parameters:"
        echo "PATH_TO_VALUES_FILE: $PATH_TO_VALUES_FILE"
        echo "CHART_REPOSITORY_NAME: $CHART_REPOSITORY_NAME"
        echo "CHART_REPOSITORY_URL: $CHART_REPOSITORY_URL"
        echo "CHART_NAME: $CHART_NAME"
        echo "CHART_VERSION: $CHART_VERSION"
        echo "K8S_NAMESPACE: $K8S_NAMESPACE"
        echo "HELM_DEPLOYMENT_NAME: $HELM_DEPLOYMENT_NAME"
        echo "HELM_OVERWRITE_VALUES: $HELM_OVERWRITE_VALUES"
        echo "HELM_TIMEOUT: $HELM_TIMEOUT"
        echo "########################"
        echo "kubectl version:"
        kubectl version
        echo "Helm version:"
        helm version
        echo "########################"
        echo ""

        echo "CURRENT PATH: $(pwd)"

        # add the helm repo if specfied
        if [[ "$CHART_REPOSITORY_NAME" != ""  && "$CHART_REPOSITORY_URL" != "" ]]; then
          echo "Adding repository: $CHART_REPOSITORY_NAME $CHART_REPOSITORY_URL"
          helm repo add "$CHART_REPOSITORY_NAME" "$$CHART_REPOSITORY_URL"
        else
          echo "No repository information specified. Skipping repository addition."
        fi

        echo "########################"
        echo "HELM CHART INFORMATION for $CHART_NAME :"
        chart_params=""
        if [[ "$CHART_VERSION" != "" ]]; then
          chart_params="--version $CHART_VERSION"
        fi
        helm show chart "$CHART_NAME" $chart_params
        echo "########################"

        echo "Listing existing helm deployments in namespace $K8S_NAMESPACE :"
        helm -n "$K8S_NAMESPACE" ls --all
        echo "########################"

        echo "Deploying helm chart $CHART_NAME as deployment $HELM_DEPLOYMENT_NAME to namespace $K8S_NAMESPACE ..."

        # read values if specified from platform_config
        parameters=""
        if [[ "$PATH_TO_VALUES_FILE" != "" ]]; then
          parameters="-f ${PATH_TO_VALUES_FILE}"
        fi

        if [[ "$CHART_VERSION" != "" ]]; then
          parameters="${parameters} --version $CHART_VERSION"
        fi

        helm upgrade -n "$K8S_NAMESPACE" -i --wait --timeout "$HELM_TIMEOUT" \
        $parameters \
        --set "$HELM_OVERWRITE_VALUES" \
        "$HELM_DEPLOYMENT_NAME" \
        "$CHART_NAME"

        echo "########################"
        echo "Listing existing helm deployments in namespace $K8S_NAMESPACE after deployment:"
        helm -n "$K8S_NAMESPACE" ls --all

        echo "########################"
        echo "Showing status for deployment:"
        helm -n "$K8S_NAMESPACE" status "$HELM_DEPLOYMENT_NAME"
