apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: delete-helm-deployment
spec:
  workspaces:
    - name: workspace
      description: |
        The workspace folder with the automation repository including helm charts and platform_config.
      mountPath: /workspace
      optional: true

  params:
    - name: k8s-namespace
      description: The k8s namespace to use for the deployment
    - name: helm-deployment-name
      description: The name to use for the helm deployment
    - name: ignore-non-existing
      description: Ignore non existing helm deployments for the task and return 0
      default: "true"
    - name: docker-registry-base-url
      description: The docker registry base url with path to load the CI image for tekton task execution from
    - name: tekton-ci-image-name
      description: The image name to use for the automation run
      default: "ubuntu-ci-minimal"
    - name: tekton-ci-image-tag
      description: The image tag to use for the automation run
      default: "latest"

  steps:
    - name: delete-deployment-via-helm
      image: "$(params.docker-registry-base-url)/$(params.tekton-ci-image-name):$(params.tekton-ci-image-tag)"
      resources:
        requests:
          memory: 100Mi
          cpu: 100m
        limits:
          memory: 256Mi
          cpu: 200m
      script: |
        #!/usr/bin/env bash
        set -ue

        # configure env:
        K8S_NAMESPACE="$(params.k8s-namespace)"
        HELM_DEPLOYMENT_NAME="$(params.helm-deployment-name)"
        IGNORE_NON_EXISTING="$(params.ignore-non-existing)"

        echo "########################"
        echo "Parameters:"
        echo "K8S_NAMESPACE: $K8S_NAMESPACE"
        echo "HELM_DEPLOYMENT_NAME: $HELM_DEPLOYMENT_NAME"
        echo "########################"
        echo "kubectl version:"
        kubectl version
        echo "Helm version:"
        helm version
        echo "########################"
        echo ""

        echo "CURRENT PATH: $(pwd)"

        echo "########################"
        echo "Listing existing helm deployments in namespace $K8S_NAMESPACE :"
        helm -n "$K8S_NAMESPACE" ls --all
        echo "########################"

        echo "Checking existence of deployment: ${HELM_DEPLOYMENT_NAME} ..."
        set +e
        check="$(helm -n "$K8S_NAMESPACE" ls --all |grep ${HELM_DEPLOYMENT_NAME})"
        set -e

        if [[ "$check" == "" ]]; then
          echo "The deployment does not exist!"
          if [[ "${IGNORE_NON_EXISTING}" == "false" ]]; then
            echo "Canceling operation, as INGORE_NON_EXISTING is set to false"
            exit 1
          fi
          echo "Skipping deletion"
          exit 0
        fi

        echo "Deployment: ${HELM_DEPLOYMENT_NAME} exists"

        echo "Deleting helm deployment $HELM_DEPLOYMENT_NAME from namespace $K8S_NAMESPACE ..."

        helm -n "${K8S_NAMESPACE}" uninstall "${HELM_DEPLOYMENT_NAME}"

        echo "########################"
        echo "Listing existing helm deployments in namespace $K8S_NAMESPACE after deployment:"
        helm -n "$K8S_NAMESPACE" ls --all
