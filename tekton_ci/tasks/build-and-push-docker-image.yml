apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-and-push-docker-image
spec:
  workspaces:
  - name: workspace
    description: |
      The workspace folder with the dockerfile and context.
    mountPath: /workspace
  params:
    - name: path-to-context
      description: The path to the build context, used by Kaniko
    - name: path-to-dockerfile-within-context
      description: The path to the Dockerfile within the given context, used by Kaniko
      default: Dockerfile
    - name: push-image-url
      description: Url of image repository for the push
    - name: push-image-tag
      description: Tag to apply to the built image
      default: "latest"
    - name: extra-build-args
      description: You can provide a list of additional build args here
      default: ""

    - name: docker-registry-base-url
      description: The docker registry base url with path to load the CI image for tekton task execution from
    - name: docker-registry-secret-name
      description: The docker registry secret name for logging into the docker registry
      default: "docker-registry-secret"
    - name: tekton-ci-image-name
      description: The image name to use for the automation run
      default: "ubuntu-ci-minimal"
    - name: tekton-ci-image-tag
      description: The image tag to use for the automation run
      default: "latest"

  steps:
    - name: configure-docker-registry-access
      resources:
        requests:
          memory: 100Mi
          cpu: 50m
        limits:
          memory: 256Mi
          cpu: 300m
      image: "$(params.docker-registry-base-url)/$(params.tekton-ci-image-name):$(params.tekton-ci-image-tag)"
      script: |
        #!/usr/bin/env bash
        set -u

        docker_config_contents="$(kubectl get secret "$(params.docker-registry-secret-name)" --output="jsonpath={.data.\.dockerconfigjson}" | base64 --decode)"

        set -e
        docker_config_path="$(workspaces.workspace.path)/.docker"
        mkdir -p "$docker_config_path"

        if [[ "$docker_config_contents" == "" ]]; then
          echo "No docker config was loaded. Generating empty config file at: ${docker_config_path}/config.json"
          echo '{}' > "${docker_config_path}/config.json"
        else
          echo "Found docker config. Writing config file to: ${docker_config_path}/config.json"
          echo "$docker_config_contents" > "${docker_config_path}/config.json"
        fi

    - name: build-and-push
      image: gcr.io/kaniko-project/executor:debug
      resources:
        requests:
          memory: 500Mi
          cpu: 300m
        limits:
          memory: 2Gi
          cpu: 1500m
      script: |
        #!/busybox/sh
        set -eu

        echo "###############"
        echo "Build settings:"
        docker_config_path="$(workspaces.workspace.path)/.docker"
        DOCKER_CONFIG_FILE="${docker_config_path}/config.json"
        CONTEXT="$(params.path-to-context)"
        DOCKERFILE="$(params.path-to-dockerfile-within-context)"
        EXTRA_BUILD_ARGS="$(params.extra-build-args)"
        DESTINATION="$(params.push-image-url):$(params.push-image-tag)"

        echo "DOCKER_CONFIG_FILE: $DOCKER_CONFIG_FILE"
        echo "CONTEXT: $CONTEXT"
        echo "DOCKERFILE: $DOCKERFILE"
        echo "EXTRA_BUILD_ARGS: $EXTRA_BUILD_ARGS"
        echo "DESTINATION: $DESTINATION"
        echo "###############"

        echo "Building docker image ..."

        mkdir -p /kaniko/.docker
        cp "$DOCKER_CONFIG_FILE" /kaniko/.docker/config.json
        /kaniko/executor $EXTRA_BUILD_ARGS --dockerfile="$DOCKERFILE" --context="$CONTEXT" --destination="$DESTINATION"
      securityContext:
        runAsUser: 0
